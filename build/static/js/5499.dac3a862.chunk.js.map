{"version":3,"file":"static/js/5499.dac3a862.chunk.js","mappings":"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","sources":["../node_modules/workbox-core/_version.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/DBWrapper.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:5.1.4'] && _();\n}\ncatch (e) { }\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A class that wraps common IndexedDB functionality in a promise-based API.\n * It exposes all the underlying power and functionality of IndexedDB, but\n * wraps the most commonly used features in a way that's much simpler to use.\n *\n * @private\n */\nexport class DBWrapper {\n    /**\n     * @param {string} name\n     * @param {number} version\n     * @param {Object=} [callback]\n     * @param {!Function} [callbacks.onupgradeneeded]\n     * @param {!Function} [callbacks.onversionchange] Defaults to\n     *     DBWrapper.prototype._onversionchange when not specified.\n     * @private\n     */\n    constructor(name, version, { onupgradeneeded, onversionchange, } = {}) {\n        this._db = null;\n        this._name = name;\n        this._version = version;\n        this._onupgradeneeded = onupgradeneeded;\n        this._onversionchange = onversionchange || (() => this.close());\n    }\n    /**\n     * Returns the IDBDatabase instance (not normally needed).\n     * @return {IDBDatabase|undefined}\n     *\n     * @private\n     */\n    get db() {\n        return this._db;\n    }\n    /**\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\n     * callback, and added an onversionchange callback to the database.\n     *\n     * @return {IDBDatabase}\n     * @private\n     */\n    async open() {\n        if (this._db)\n            return;\n        this._db = await new Promise((resolve, reject) => {\n            // This flag is flipped to true if the timeout callback runs prior\n            // to the request failing or succeeding. Note: we use a timeout instead\n            // of an onblocked handler since there are cases where onblocked will\n            // never never run. A timeout better handles all possible scenarios:\n            // https://github.com/w3c/IndexedDB/issues/223\n            let openRequestTimedOut = false;\n            setTimeout(() => {\n                openRequestTimedOut = true;\n                reject(new Error('The open request was blocked and timed out'));\n            }, this.OPEN_TIMEOUT);\n            const openRequest = indexedDB.open(this._name, this._version);\n            openRequest.onerror = () => reject(openRequest.error);\n            openRequest.onupgradeneeded = (evt) => {\n                if (openRequestTimedOut) {\n                    openRequest.transaction.abort();\n                    openRequest.result.close();\n                }\n                else if (typeof this._onupgradeneeded === 'function') {\n                    this._onupgradeneeded(evt);\n                }\n            };\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (openRequestTimedOut) {\n                    db.close();\n                }\n                else {\n                    db.onversionchange = this._onversionchange.bind(this);\n                    resolve(db);\n                }\n            };\n        });\n        return this;\n    }\n    /**\n     * Polyfills the native `getKey()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @return {Array}\n     * @private\n     */\n    async getKey(storeName, query) {\n        return (await this.getAllKeys(storeName, query, 1))[0];\n    }\n    /**\n     * Polyfills the native `getAll()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAll(storeName, query, count) {\n        return await this.getAllMatching(storeName, { query, count });\n    }\n    /**\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAllKeys(storeName, query, count) {\n        const entries = await this.getAllMatching(storeName, { query, count, includeKeys: true });\n        return entries.map((entry) => entry.key);\n    }\n    /**\n     * Supports flexible lookup in an object store by specifying an index,\n     * query, direction, and count. This method returns an array of objects\n     * with the signature .\n     *\n     * @param {string} storeName\n     * @param {Object} [opts]\n     * @param {string} [opts.index] The index to use (if specified).\n     * @param {*} [opts.query]\n     * @param {IDBCursorDirection} [opts.direction]\n     * @param {number} [opts.count] The max number of results to return.\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\n     *     returned objects is changed from an array of values to an array of\n     *     objects in the form {key, primaryKey, value}.\n     * @return {Array}\n     * @private\n     */\n    async getAllMatching(storeName, { index, query = null, // IE/Edge errors if query === `undefined`.\n    direction = 'next', count, includeKeys = false, } = {}) {\n        return await this.transaction([storeName], 'readonly', (txn, done) => {\n            const store = txn.objectStore(storeName);\n            const target = index ? store.index(index) : store;\n            const results = [];\n            const request = target.openCursor(query, direction);\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    results.push(includeKeys ? cursor : cursor.value);\n                    if (count && results.length >= count) {\n                        done(results);\n                    }\n                    else {\n                        cursor.continue();\n                    }\n                }\n                else {\n                    done(results);\n                }\n            };\n        });\n    }\n    /**\n     * Accepts a list of stores, a transaction type, and a callback and\n     * performs a transaction. A promise is returned that resolves to whatever\n     * value the callback chooses. The callback holds all the transaction logic\n     * and is invoked with two arguments:\n     *   1. The IDBTransaction object\n     *   2. A `done` function, that's used to resolve the promise when\n     *      when the transaction is done, if passed a value, the promise is\n     *      resolved to that value.\n     *\n     * @param {Array<string>} storeNames An array of object store names\n     *     involved in the transaction.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {!Function} callback\n     * @return {*} The result of the transaction ran by the callback.\n     * @private\n     */\n    async transaction(storeNames, type, callback) {\n        await this.open();\n        return await new Promise((resolve, reject) => {\n            const txn = this._db.transaction(storeNames, type);\n            txn.onabort = () => reject(txn.error);\n            txn.oncomplete = () => resolve();\n            callback(txn, (value) => resolve(value));\n        });\n    }\n    /**\n     * Delegates async to a native IDBObjectStore method.\n     *\n     * @param {string} method The method name.\n     * @param {string} storeName The object store name.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {...*} args The list of args to pass to the native method.\n     * @return {*} The result of the transaction.\n     * @private\n     */\n    async _call(method, storeName, type, ...args) {\n        const callback = (txn, done) => {\n            const objStore = txn.objectStore(storeName);\n            // TODO(philipwalton): Fix this underlying TS2684 error.\n            // @ts-ignore\n            const request = objStore[method].apply(objStore, args);\n            request.onsuccess = () => done(request.result);\n        };\n        return await this.transaction([storeName], type, callback);\n    }\n    /**\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\n     * doesn't need to be called since:\n     *   1. It's usually better to keep a connection open since opening\n     *      a new connection is somewhat slow.\n     *   2. Connections are automatically closed when the reference is\n     *      garbage collected.\n     * The primary use case for needing to close a connection is when another\n     * reference (typically in another tab) needs to upgrade it and would be\n     * blocked by the current, open connection.\n     *\n     * @private\n     */\n    close() {\n        if (this._db) {\n            this._db.close();\n            this._db = null;\n        }\n    }\n}\n// Exposed on the prototype to let users modify the default timeout on a\n// per-instance or global basis.\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\n// Wrap native IDBObjectStore methods according to their mode.\nconst methodsToWrap = {\n    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\n    readwrite: ['add', 'put', 'clear', 'delete'],\n};\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\n    for (const method of methods) {\n        if (method in IDBObjectStore.prototype) {\n            // Don't use arrow functions here since we're outside of the class.\n            DBWrapper.prototype[method] =\n                async function (storeName, ...args) {\n                    return await this._call(method, storeName, mode, ...args);\n                };\n        }\n    }\n}\n"],"names":["self","_","e","_construct","Parent","args","Class","Reflect","construct","bind","a","push","apply","instance","Function","prototype","arguments","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","_wrapNativeSuper","_cache","Map","undefined","fn","toString","indexOf","has","get","set","Wrapper","getPrototypeOf","this","constructor","Object","create","enumerable","writable","configurable","setPrototypeOf","messageGenerator","code","msg","JSON","stringify","Error","registration","scope","Set","DBWrapper","name","version","onupgradeneeded","onversionchange","_db","_name","_version","_onupgradeneeded","_onversionchange","close","Promise","resolve","reject","openRequestTimedOut","setTimeout","OPEN_TIMEOUT","openRequest","indexedDB","open","onerror","error","evt","transaction","abort","result","onsuccess","db","storeName","query","getAllKeys","count","getAllMatching","includeKeys","entries","map","entry","key","index","direction","txn","store","objectStore","target","results","request","openCursor","cursor","continue","storeNames","type","callback","onabort","oncomplete","method","objStore","mode","methods","IDBObjectStore","_call","readonly","readwrite"],"sourceRoot":""}